import org.gradle.util.GradleVersion

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    String rootGroupId = project.ext.rootGroupId = "name.remal.gradle-plugins.${rootProject.name}"
    String rootArtifactId = project.ext.rootArtifactId = rootProject.name
    String rootSnapshotVersion = project.ext.rootSnapshotVersion = '2-SNAPSHOT'
    dependencies {
        //classpath("$rootGroupId:$rootArtifactId:$rootSnapshotVersion") { version { strictly(rootSnapshotVersion) } }
        classpath 'name.remal.gradle-plugins.toolkit:build-logic:0.63.17'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = project.rootGroupId
    version = project.rootSnapshotVersion
}

apply plugin: 'name.remal.toolkit.build-logic'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

// TODO: REMOVE THIS SECTION FOR REAL PLUGIN
if (project.isRunningOnCi) {
    String repositoryName = project.ext['repository-name'] ?: ''
    if (repositoryName.isEmpty()) {
        throw new GradleException('`repository-name` property is empty')
    }
    if (repositoryName != 'template') {
        throw new GradleException('This code should be executed for template repository only')
    }

    TaskProvider processGradleProperties = tasks.register('processGradleProperties') {
        outputs.upToDateWhen { false }

        doLast {
            File file = project.file('gradle.properties')
            String content = file.getText('UTF-8')
            boolean replaced = false
            content = content.replaceFirst(/((?:^|[\r\n]\s*)gradle-api.min-version)\s*=\s*\d+\S*(\s|$)/) { List<String> groups ->
                GradleVersion lastMinorVersion = project.getAllGradleVersions().findAll { GradleVersion ver ->
                    ver == ver.baseVersion && ver.version.count('.') == 1
                }[1]
                replaced = true
                return "${groups[1]} = ${lastMinorVersion.version}${groups[2]}"
            }
            if (replaced) {
                file.setText(content, 'UTF-8')
            }
        }
    }

    tasks.named('processReadme').configure {
        dependsOn(processGradleProperties)
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-gradle-plugin'

dependencies {
}

gradlePlugin {
    plugins {
        'name.remal.template-plugin' {
            id = 'name.remal.template-plugin'
            implementationClass = 'name.remal.gradle_plugins.template.TemplatePlugin'
            displayName = 'Template plugin'
            description = property('repository-description')
        }
    }
}
